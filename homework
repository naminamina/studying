#!/usr/bin/env python3
# -*- coding: utf-8 -*-


#roslaunch realsense2_camera rs_camera.launch

import os
import time
import json
import yaml
import openai
import datetime
import cv2
import base64
import numpy as np
import rospy
from happymimi_msgs.srv import SimpleString, SimpleStringResponse,SetStr
from happymimi_msgs.srv import Str2Str,SimpleTrg,SimpleTrgResponse

openai.api_key = os.getenv("OPENAI_API_KEY")


class GptFeatureServer():
    def __init__(self):
        self.service = rospy.Service('/gpt_feature_server', SimpleTrg, self.main_function)
        rospy.loginfo("start gpt server")
        self.used_sentences = ""


    def main_function(self, req):
        save_image_server = rospy.ServiceProxy('/save_image', SimpleString)
        image_result = save_image_server().result

        home_directory = os.path.expanduser('~')
        filename = os.path.join(home_directory, 'image.png')


        image = cv2.imread(filename)
        
        height, width = image.shape[:2]
        if height > width:
            new_height = 640
            new_width = int((new_height / height) * width)
        else:
            new_width = 640
            new_height = int((new_width / width) * height)
        
        resized_image = cv2.resize(image, (new_width, new_height))

        rospy.loginfo(f"using-:{resized_image}")
        rospy.loginfo(f"using-image:{resized_image}")


        cv2.imwrite('image.png', resized_image)



        with open("image.png", "rb") as image_file: 
            base64_image = base64.b64encode(image_file.read()).decode('utf-8')

        prompt = f"Objective: You are an action plan generation API. Predict the tasks that the life support robot should perform from the #InputImage and choose the most appropriate one from the #TaskOptions.\
                #TaskOptions:study,not_study\
                #Output: Output only the category name from the #TaskOptions. Do not respond in Japanese, English, symbols, error messages, or exceptions."

        rospy.loginfo(f"gpt-prompt{prompt}")


        response = openai.ChatCompletion.create(
            model="gpt-4o",  # モデルの指定
            messages=[
                # {"role": "system", "content": "You are an emergency response robot capable of conversation. You will communicate with a person facing a crisis, gather information about the situation, and provide necessary assistance."},
                # {"role": "system", "content": "You are Api.Resopnse JSON format on the following context."},
                {"role": "system", "content": "You are a feature extraction machine that recognizes human characteristics."},
                {"role": "user",
                "content": [
                    {"type": "text", "text": prompt},
                    {
                        "type": "image_url",
                        "image_url": {
                            "url": f"data:image/png;base64,{base64_image}"
                        },
                    },
                ]

             }
            ],
            request_timeout=15
        )

 

        result = response['choices'][0]['message']['content']
        if result == "study":
            return SimpleTrgResponse(result = True)
        else:
            return SimpleTrgResponse(result = False)

        # rospy.loginfo("testdayoyooyo" + result)
        # # contentがリストであれば文字列に変換
        # # if isinstance(content, list):
        # #     result = ''.join(content)
        # # else:
        # #     result = content
        # rospy.loginfo(f"gpt-result:{result}")

        # result=json.dumps({"data": result})
        # self.used_sentences += result
        # rospy.loginfo(f"gpt-result:{result}")
        # print(self.used_sentences)
        # return SimpleStringResponse(result = result)


if __name__ == '__main__':
    rospy.init_node('gpt_feature_server')
    server = GptFeatureServer()
    rospy.spin()
